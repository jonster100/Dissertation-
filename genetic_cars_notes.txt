Done: -
Created Roulette Selection
Created Simple Mutation for cars

to do:
Evolutionary algorithm
	- Crossover
		- One-Point
		- Two-Point
		- Introduce reinforcement learning to optimise crossover.
	- Mutation = Done/Maybe 
	- Selection
		- Roulette Selection = Done/Maybe 
		- Tournament Selection
	- Add a overall genetic algorithm to make changes the selection used and crossover.
	- Allow for the weaker cars to have more mutations where the stronger cars have fewer.
		
Baseline Evolutionary algorithm = Done/Maybe
	- Mutation

Selection Classifier
	- Clustering back-end
	- Car scoring

GUI
	- List of car results from the baseline EA
	- List of car results from the new EA
	- Ability to look at performance over time
	- Look through car performance for past run instances

Documents
	- Start kanban board
	- plan testing document
	- look more into the research section of the project

Notes - 
index.js in src file is the main script that runs the genetic algorithm
it calls the manage-round.js script in cw_newRound function in index.js

generation-config which is passed to the manage-round.js is the config file which contains parent selection, inbreeding selection.

the manage-round.js returns generationState variable which is used a lot.

createCrossBreed - for a new object it iteracted over all the keys such as "wheel_radius", "chassis_density", "vertex_list", "wheel_vertex", these are gone through choosing one of the two parents data as its value.

result/score passed to manage-round.js is the list of cars, the result/score pass car data, def: which car sizes, score and state, state and score have the same data.
	- how take data from the def and car to make new vehicle.
	

classifier notes:
	- A car will be chosen at random or iteratively, choosing a second car-parent is where the classifier will work finding the best parter to make the most optimised children.
	- When a car is given to the clustering it will be returned with a score, after all the cars have been scored the one with the highest will be the parter chosen.
	- The first car will be first be scored through the clustering, and then the rest of the cars will have there scored compared to the first car.
	?? - Need to figure out how i want to score the cars via the clustering, i could implement a genetic algorithm which will change the scoring methods.("This can be another point for comparison.")
	!! - There will be clusters for each of the data points such as chasis_densisty, vertex_list, wheel_density, wheel_radius and wheel_vertex. The cars will be put into each one and then KNN will be used to find the closest neighbors.
	
	
	- ??? Some kind of recursive classifier by changing the data set, keeps on classiying all the cars until only one good car is left ("Use bayes theorom - maybe")??? 
	
