Testing: -
Evolutionary algorithm
	- Mutation
		- Random Mutation = (11/02/2019) Done/Maybe
		- Multi-mutations (16/02/2019) improving
			!! - I also need to change the range of the multi mutations and experiment to find the best one
	- Selection
		- Roulette Selection = (09/02/2019)Done/Maybe 
		- Tournament Selection = (14/02/2019)Done/Maybe 
			!! - I need to change this selection to not use the entire population only a fraction which is to be determined
		- Elitism in the selection process where the top performing car can mate twice (25/02/2019) Done/Maybe
	- Crossover
		- One-Point = (14/02/2019)Done/Maybe 
		- Two-Point = (21/02/2019)Done/Maybe - (24/02/2019)changed the crossover point to random from pre-fixed
	
Baseline Evolutionary algorithm = 
	- Mutation = (11/02/2019)optimizing
	
Selection Clustering
	- Clustering back-end = (14/02/2019)-(18/02/2019) Done/Maybe 
	- Car fitness scoring (19/02/2019) - (21/02/2019) Testing
		!! - I will test reducing the influence this scoring method has on the final score.
	
In-Progress

Initial population that can be read from a .json file and reused for different EA's

Allow for the weaker cars to have more mutations where the stronger cars have fewer. = (16/02/2019) improving
		
To Do: - 
Evolutionary algorithm
	- Crossover
		- Introduce reinforcement learning to optimise crossover.
	- Mutation
		- Exchange mutations
	
	
	- Add a overall genetic algorithm to make changes to the selection used and crossover.

	- look into possibly passing cars from 1 generation to another without being removed

Selection Clustering
	- look into balancing the clustering data
	- The clustering data should be able to be outputted into a file or txt file. (cannot do through the browser)
	- possibly change the scoring to be strong the closer the neighbor and weaker the further away it is
	- look into whether 1 data point has too strong of a score compared to others

GUI
	- List of car results from the baseline EA
	- List of car results from the new EA
	- Ability to look at performance over time
	- Look through car performance for past run instances

Performance results of each run instance should be outputted into a file so that the data can be analysed and compared with the different running EA's


Design Iterations:
	14/02/2019 EA(v0.1) - does worse than baseline using both tournament selection with roulette selection
		using tournament selection to get 2 strong parents has extremely inconsistent performance per instance
		using tournament selection to get 1 strong and 1 weak parent is more consistent in performance but still have large decline here and there.
		using one point crossover
		using roulette selection
	
	16/02/2019 EA(v0.2) - An improvement using multi-mutations. No notable difference in performance other than a larger set of car being able to move further at the start, but this does go up and down.

	19/02/2019 EA(v0.3) - This iteration of the algorithm uses a clustering selection where a car is scored based on the surrounding neighbors data points. 
		The only problems i found with the clustering was syntax missing or undefined being passed back due to the nearest neighbors going out of bounds
		
	24/02/2019 EA(v0.4) - This iteration has a working clustering scoring system in combination with two selection operators, two mutation operators and two cross-over operators
		at this point i will mostly be fine tuning the different operators so they work better at improving car performance and may further include dynamic changing of operators using the previous average scores of the run rounds
	
current problems:
	(19/02/2019) - The weaker cars are not improving over time there are spikes in improvement but it goes back down due to the mutation.
	(19/02/2019) - I do not know how i'm going to make the EA's run side by side.
	(19/02/2019) - Optimising a scoring system for how multi-mutations can work better so that the weaker cars can be improved faster.
	(21/02/2019) - Using the clustering makes the cars performance go up and down a lot and not continuous (21/02/2019) - this has been fixed by adding including the cars own score not just neighboring car scores
	(24/02/2019) - The "Math.random().toString(32);" in the crossover that gives the cars unique id repeats ones already created/used in past cars, there is no evidence of this coursing problems but it could have unforseen consequences int he clustering. fixed it by changing the id system to a int or no of creation so duplication will not exist
	
Design considerations:
	(19/02/2019) - using the current clustering system to target the best car crossover points
	
Framework Notes - 
	index.js in src file is the main script that runs the genetic algorithm
	it calls the manage-round.js script in cw_newRound function in index.js

	generation-config which is passed to the manage-round.js is the config file which contains parent selection, inbreeding selection.
	
	the manage-round.js returns generationState variable which is used a lot.

	createCrossBreed - for a new object it iteracted over all the keys such as "wheel_radius", "chassis_density", "vertex_list", "wheel_vertex", these are gone through choosing one of the two parents data as its value.

	result/score passed to manage-round.js is the list of cars, the result/score pass car data, def: which car sizes, score and state, state and score have the same data.
		- how take data from the def and car to make new vehicle.



classifier notes:
	- A car will be chosen at random or iteratively, choosing a second car-parent is where the classifier will work finding the best parter to make the most optimised children.
	- When a car is given to the clustering it will be returned with a score, after all the cars have been scored the one with the highest will be the parter chosen.
	- The first car will be first be scored through the clustering, and then the rest of the cars will have there scored compared to the first car.
	?? - Need to figure out how i want to score the cars via the clustering, i could implement a genetic algorithm which will change the scoring methods.("This can be another point for comparison.")
	!! - There will be clusters for each of the data points such as chasis_densisty, vertex_list, wheel_density, wheel_radius and wheel_vertex. The cars will be put into each one and then KNN will be used to find the closest neighbors.
	
	
	- ??? Some kind of recursive classifier by changing the data set, keeps on classiying all the cars until only one good car is left ("Use bayes theorom - maybe")??? 
	
